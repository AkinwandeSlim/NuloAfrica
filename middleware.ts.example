import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

/**
 * Middleware for protecting dashboard routes and handling authentication
 * 
 * To enable:
 * 1. Rename this file to `middleware.ts`
 * 2. Implement your authentication logic
 * 3. Set auth cookies in your signin/signup pages
 */

export function middleware(request: NextRequest) {
  // Get authentication token from cookies
  // Replace 'auth-token' with your actual cookie name
  const token = request.cookies.get('auth-token')
  const isAuthenticated = !!token

  const { pathname } = request.nextUrl

  // Define protected routes (dashboard pages)
  const protectedRoutes = [
    '/dashboard',
    '/favorites',
    '/messages',
    '/profile',
    '/admin',
  ]

  // Check if current path is protected
  const isProtectedRoute = protectedRoutes.some(route => 
    pathname.startsWith(route)
  )

  // Redirect unauthenticated users to signin
  if (isProtectedRoute && !isAuthenticated) {
    const signInUrl = new URL('/signin', request.url)
    // Add callback URL to redirect back after signin
    signInUrl.searchParams.set('callbackUrl', pathname)
    return NextResponse.redirect(signInUrl)
  }

  // Redirect authenticated users away from auth pages
  const authPages = ['/signin', '/signup']
  if (isAuthenticated && authPages.includes(pathname)) {
    return NextResponse.redirect(new URL('/dashboard', request.url))
  }

  // Admin-only route protection
  if (pathname.startsWith('/admin')) {
    // TODO: Check if user has admin role
    // const userRole = getUserRoleFromToken(token)
    // if (userRole !== 'admin') {
    //   return NextResponse.redirect(new URL('/dashboard', request.url))
    // }
  }

  return NextResponse.next()
}

// Configure which routes to run middleware on
export const config = {
  matcher: [
    /*
     * Match all request paths except:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - public folder
     * - api routes (optional, depends on your needs)
     */
    '/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
  ],
}

/**
 * Example: Using with NextAuth.js
 * 
 * import { withAuth } from "next-auth/middleware"
 * 
 * export default withAuth({
 *   callbacks: {
 *     authorized: ({ token }) => !!token
 *   },
 * })
 * 
 * export const config = {
 *   matcher: ["/dashboard/:path*", "/favorites/:path*", "/messages/:path*", "/profile/:path*", "/admin/:path*"]
 * }
 */

/**
 * Example: Using with Supabase
 * 
 * import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'
 * 
 * export async function middleware(request: NextRequest) {
 *   const res = NextResponse.next()
 *   const supabase = createMiddlewareClient({ req: request, res })
 *   const { data: { session } } = await supabase.auth.getSession()
 *   
 *   if (!session && request.nextUrl.pathname.startsWith('/dashboard')) {
 *     return NextResponse.redirect(new URL('/signin', request.url))
 *   }
 *   
 *   return res
 * }
 */
